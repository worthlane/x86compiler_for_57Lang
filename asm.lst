     1                                  %include "std_lib/stdlib.s"
     2                              <1> section .data
     3                              <1> 
     4                              <1> UNKNOWN_LETTER equ -1
     5                              <1> MINUS_TRUE equ 1
     6 00000000 0000000000000000    <1> neg_flag dq 0
     7 00000008 30303030            <1> BUFFER db '0000'
     8                              <1> 
     9                              <1> SIGN_BIT equ 80000000h
    10                              <1> MULTIPLIER equ 1000
    11 0000000C 303132333435363738- <1> DecOutput  db '0123456789-.', 0x0A
    11 00000015 392D2E0A            <1>
    12                              <1> SIGN_PRINT equ 10
    13                              <1> DOT_PRINT  equ 11
    14                              <1> NEW_LINE_PRINT equ 12
    15                              <1> 
    16                              <1> section .text
    17                              <1> 
    18                              <1> %include "std_lib/out.s"
    19 00000000 BB00000000          <2> _out:       mov rbx, 0
    20 00000005 C4E1D22AEB          <2>             vcvtsi2ss xmm5, rbx
    21 0000000A C5F82EC5            <2>             vucomiss xmm0, xmm5
    22                              <2> 
    23 0000000E 731A                <2>             jae Positive
    24                              <2> 
    25 00000010 BF0A000000          <2>             mov rdi, SIGN_PRINT                        ; print minus
    26 00000015 E891000000          <2>             call PrintChar
    27                              <2> 
    28 0000001A 48C7C3FFFFFFFF      <2>             mov rbx, -1
    29 00000021 C4E1D22AEB          <2>             vcvtsi2ss xmm5, rbx
    30 00000026 C5FA59C5            <2>             vmulss xmm0, xmm0, xmm5
    31                              <2> 
    32                              <2> Positive:
    33                              <2> 
    34 0000002A C4E1FA2CF8          <2>             vcvttss2si rdi, xmm0            ; getting integrer part
    35 0000002F C4E1F22ACF          <2>             vcvtsi2ss xmm1, rdi             ; xmm1 = int_part
    36 00000034 E831000000          <2>             call PrintDec                   ; print integrer part
    37                              <2> 
    38 00000039 BF0B000000          <2>             mov rdi, DOT_PRINT
    39 0000003E E868000000          <2>             call PrintChar                  ; print dot
    40                              <2> 
    41 00000043 C5FA5CC1            <2>             vsubss xmm0, xmm0, xmm1         ; mod(xmm0) < 1
    42                              <2> 
    43 00000047 BFE8030000          <2>             mov rdi, MULTIPLIER
    44 0000004C C4E1F22ACF          <2>             vcvtsi2ss xmm1, rdi
    45 00000051 C5F259C0            <2>             vmulss xmm0, xmm1, xmm0         ; getting first (MULTIPLIER / 10) digits
    46 00000055 C4E1FA2CF8          <2>             vcvttss2si rdi, xmm0
    47 0000005A E80B000000          <2>             call PrintDec                   ; print digits
    48                              <2> 
    49 0000005F BF0C000000          <2>             mov rdi, NEW_LINE_PRINT
    50 00000064 E842000000          <2>             call PrintChar                  ; print new line
    51                              <2> 
    52 00000069 C3                  <2>             ret
    53                              <2> 
    54                              <2> ;:================================================
    55                              <2> ; Prints dec number in console
    56                              <2> ; Entry: rdi - dec number
    57                              <2> ; Exit: rax - symbols printed
    58                              <2> ; Destr: rcx
    59                              <2> ;:================================================
    60                              <2> 
    61 0000006A 53                  <2> PrintDec:           push rbx
    62 0000006B 52                  <2>                     push rdx
    63 0000006C 56                  <2>                     push rsi
    64                              <2> 
    65 0000006D 4831DB              <2>                     xor rbx, rbx                        ; init printed counter
    66                              <2> 
    67 00000070 F7C700000080        <2>                     test edi, SIGN_BIT                  ; check if number is negative
    68 00000076 7407                <2>                     jz PositiveDec
    69 00000078 57                  <2>                     push rdi
    70                              <2>                     ;mov rdi, SIGN_PRINT                        ; print minus if negative
    71                              <2>                     ;call PrintChar
    72 00000079 4801C3              <2>                     add rbx, rax
    73 0000007C 5F                  <2>                     pop rdi
    74                              <2> 
    75 0000007D F7DF                <2>                     neg edi                             ; getting module
    76                              <2> 
    77 0000007F 4889F8              <2> PositiveDec:        mov rax, rdi
    78 00000082 4831C9              <2>                     xor rcx, rcx                        ; init digit counter
    79                              <2> 
    80 00000085 4831D2              <2> GetDecDigit:        xor rdx, rdx
    81 00000088 BE0A000000          <2>                     mov rsi, 10                         ; the basis of the number system
    82 0000008D 48F7F6              <2>                     div rsi
    83                              <2> 
    84 00000090 52                  <2>                     push rdx                            ; saving symbol in stack
    85                              <2> 
    86 00000091 48FFC1              <2>                     inc rcx
    87                              <2> 
    88 00000094 4885C0              <2>                     test rax, rax
    89 00000097 75EC                <2>                     jnz GetDecDigit                     ; stop if rax == 0
    90                              <2> 
    91 00000099 4801CB              <2>                     add rbx, rcx
    92                              <2> 
    93 0000009C 5F                  <2> PrintDecDigits:     pop rdi
    94 0000009D E809000000          <2>                     call PrintChar                      ; get digits from stack and print them
    95                              <2> 
    96 000000A2 E2F8                <2>                     loop PrintDecDigits
    97                              <2> 
    98 000000A4 4889D8              <2>                     mov rax, rbx
    99                              <2> 
   100 000000A7 5E                  <2>                     pop rsi
   101 000000A8 5A                  <2>                     pop rdx
   102 000000A9 5B                  <2>                     pop rbx
   103 000000AA C3                  <2>                     ret
   104                              <2> 
   105                              <2> ;------------------------------------------------
   106                              <2> ; Prints char
   107                              <2> ;
   108                              <2> ; Entry: rdi - char
   109                              <2> ; Exit: rax - symbols printed
   110                              <2> ; Destr:
   111                              <2> ;------------------------------------------------
   112                              <2> 
   113 000000AB 52                  <2> PrintChar:      push rdx
   114 000000AC 53                  <2>                 push rbx
   115 000000AD 51                  <2>                 push rcx
   116 000000AE 56                  <2>                 push rsi
   117                              <2> 
   118 000000AF 48BE-               <2>                 mov rsi, DecOutput
   118 000000B1 [0C00000000000000]  <2>
   119 000000B9 4801FE              <2>                 add rsi, rdi
   120 000000BC B801000000          <2>                 mov rax, 0x01                               ; write64 (rdi, rsi, rdx) ... r10, r8, r9
   121 000000C1 BF01000000          <2>                 mov rdi, 1                                  ; stdout
   122 000000C6 BA01000000          <2>                 mov rdx, 1                                  ; buffer size
   123 000000CB 0F05                <2>                 syscall
   124                              <2> 
   125 000000CD 5E                  <2>                 pop rsi
   126 000000CE 59                  <2>                 pop rcx
   127 000000CF 5B                  <2>                 pop rbx
   128 000000D0 5A                  <2>                 pop rdx
   129 000000D1 C3                  <2>                 ret
   130                              <2> 
   131                              <2> 
   132                              <2> 
    19                              <1> %include "std_lib/in.s"
    20 000000D2 48C70425[00000000]- <2> _in:        mov qword [neg_flag], 0
    20 000000DA 00000000            <2>
    21 000000DE BA00000000          <2>             mov rdx, 0
    22 000000E3 C4E1FA2AC2          <2>             vcvtsi2ss xmm0, rdx
    23                              <2> 
    24 000000E8 E8D7000000          <2>             call CheckMinus                 ; flag changint is num is negative
    25                              <2> 
    26 000000ED 4883FAFF            <2>             cmp rdx, UNKNOWN_LETTER         ; if first symbol is not digit and not minus - return 0
    27 000000F1 744D                <2>             je Return
    28                              <2> 
    29 000000F3 E875000000          <2>             call GetDec                     ; get integrer part
    30                              <2> 
    31 000000F8 C4E1FA2AC2          <2>             vcvtsi2ss xmm0, rdx             ; xmm0 = integrer part
    32                              <2> 
    33 000000FD 4883FE2E            <2>             cmp rsi, '.'                    ; if no non-integrer part - return
    34 00000101 751F                <2>             jne NormalExit
    35                              <2> 
    36 00000103 4831D2              <2>             xor rdx, rdx
    37 00000106 E862000000          <2>             call GetDec                     ; get non-integrer part
    38                              <2> 
    39 0000010B C4E1F22ACA          <2>             vcvtsi2ss xmm1, rdx             ; xmm1 = non-integrer part
    40                              <2> 
    41 00000110 E88C000000          <2>             call Pow
    42 00000115 C4E1EA2AD0          <2>             vcvtsi2ss xmm2, rax             ; xmm2 = 10^(non-integrer len)
    43                              <2> 
    44 0000011A C5F25ECA            <2>             vdivss xmm1, xmm1, xmm2         ; xmm1 = non-integrer part / 10^(non-integrer len
    45 0000011E C5F258C0            <2>             vaddss xmm0, xmm1, xmm0         ; sum integrer and non-integrer part
    46                              <2> 
    47 00000122 48C7C6FFFFFFFF      <2> NormalExit: mov rsi, -1
    48 00000129 C4E1E22ADE          <2>             vcvtsi2ss xmm3, rsi             ; xmm3 = -1
    49                              <2> 
    50 0000012E 488B3425[00000000]  <2>             mov rsi, qword [neg_flag]
    51 00000136 4883FE01            <2>             cmp rsi, MINUS_TRUE
    52 0000013A 7504                <2>             jne Return
    53                              <2> 
    54 0000013C C5FA59C3            <2>             vmulss xmm0, xmm0, xmm3         ; if neg_flag == MINUS_TRUE -> xmm0 *= -1
    55                              <2> 
    56 00000140 C3                  <2> Return:     ret
    57                              <2> 
    58                              <2> 
    59                              <2> ; =============================
    60                              <2> ; Gets char ASCII
    61                              <2> ; Entry:
    62                              <2> ; Exit: rax - ASCII
    63                              <2> ; Destr:
    64                              <2> ; =============================
    65                              <2> 
    66 00000141 56                  <2> GetChar:        push rsi
    67 00000142 57                  <2>                 push rdi
    68 00000143 52                  <2>                 push rdx
    69                              <2> 
    70 00000144 48BE-               <2>                 mov rsi, BUFFER
    70 00000146 [0800000000000000]  <2>
    71 0000014E B800000000          <2>                 mov rax, 0x00                               ; read64 (rdi, rsi, rdx) ... r10, r8, r9
    72 00000153 BF00000000          <2>                 mov rdi, 0                                  ; stdin
    73 00000158 BA01000000          <2>                 mov rdx, 1                                  ; buffer size
    74 0000015D 0F05                <2>                 syscall
    75                              <2> 
    76 0000015F 4831C0              <2>                 xor rax, rax
    77 00000162 8A0425[08000000]    <2>                 mov al, [BUFFER]
    78                              <2> 
    79 00000169 5A                  <2>                 pop rdx
    80 0000016A 5F                  <2>                 pop rdi
    81 0000016B 5E                  <2>                 pop rsi
    82 0000016C C3                  <2>                 ret
    83                              <2> 
    84                              <2> 
    85                              <2> ;:================================================
    86                              <2> ; Gets dec number from console
    87                              <2> ; Entry: rdx - first digit
    88                              <2> ; Exit: rax - number_len, rdx - number, rsi - last char
    89                              <2> ; Destr: rbx, ecx
    90                              <2> ;:================================================
    91                              <2> 
    92 0000016D 4831DB              <2> GetDec:             xor rbx, rbx                        ; init printed counter
    93                              <2> 
    94 00000170 E8CCFFFFFF          <2> NewDigit:           call GetChar
    95 00000175 4889C6              <2>                     mov rsi, rax                        ; rsi = char ASCII
    96                              <2> 
    97 00000178 3C30                <2>                     cmp al, '0'
    98 0000017A 7C21                <2>                     jl NotDigit
    99                              <2> 
   100 0000017C 3C39                <2>                     cmp al, '9'
   101 0000017E 7F1D                <2>                     jg NotDigit
   102                              <2> 
   103 00000180 50                  <2>                     push rax
   104                              <2> 
   105 00000181 89D0                <2>                     mov eax, edx
   106 00000183 B90A000000          <2>                     mov ecx, 10
   107 00000188 F7E1                <2>                     mul ecx                             ; EDX:EAX = EAX * 10
   108                              <2> 
   109 0000018A 48C1E220            <2>                     shl rdx, 32
   110 0000018E 01C2                <2>                     add edx, eax                        ; RDX = EDX:EAX
   111                              <2> 
   112 00000190 58                  <2>                     pop rax
   113                              <2> 
   114 00000191 4883E830            <2>                     sub rax, '0'
   115 00000195 4801C2              <2>                     add rdx, rax
   116 00000198 48FFC3              <2>                     inc rbx
   117                              <2> 
   118 0000019B EBD3                <2>                     jmp NewDigit
   119                              <2> 
   120 0000019D 4889D8              <2> NotDigit:           mov rax, rbx
   121 000001A0 C3                  <2>                     ret
   122                              <2> 
   123                              <2> ;:================================================
   124                              <2> ; 10 pow
   125                              <2> ; Entry: ax - degree
   126                              <2> ; Exit: rax - 10^ax
   127                              <2> ; Destr:
   128                              <2> ;:================================================
   129                              <2> 
   130 000001A1 51                  <2> Pow:            push rcx
   131 000001A2 52                  <2>                 push rdx
   132 000001A3 53                  <2>                 push rbx
   133                              <2> 
   134 000001A4 4889C1              <2>                 mov rcx, rax
   135 000001A7 BA01000000          <2>                 mov rdx, 1                          ; 10^0
   136                              <2> 
   137 000001AC 89D0                <2> PowLoop:        mov eax, edx
   138 000001AE BB0A000000          <2>                 mov ebx, 10
   139 000001B3 F7E3                <2>                 mul ebx                             ; EDX:EAX = EAX * 10
   140                              <2> 
   141 000001B5 48C1E220            <2>                 shl rdx, 32
   142 000001B9 01C2                <2>                 add edx, eax                        ; RDX = EDX:EAX
   143                              <2> 
   144 000001BB E2EF                <2>                 loop PowLoop
   145                              <2> 
   146 000001BD 4889D0              <2>                 mov rax, rdx
   147                              <2> 
   148 000001C0 5B                  <2>                 pop rbx
   149 000001C1 5A                  <2>                 pop rdx
   150 000001C2 59                  <2>                 pop rcx
   151 000001C3 C3                  <2>                 ret
   152                              <2> 
   153                              <2> ;:================================================
   154                              <2> ; Changes neg_flag if needed
   155                              <2> ; Entry:
   156                              <2> ; Exit: rdx - first digit of num (UNKNOWN_LETTER if error)
   157                              <2> ; Destr:
   158                              <2> ;:================================================
   159                              <2> 
   160                              <2> 
   161 000001C4 E878FFFFFF          <2> CheckMinus:     call GetChar
   162 000001C9 4883F82D            <2>                 cmp rax, '-'
   163 000001CD 750D                <2>                 jne PlusNum
   164                              <2> 
   165 000001CF 48FF0425[00000000]  <2>                 inc qword [neg_flag]                ; change flag if minus
   166 000001D7 4831D2              <2>                 xor rdx, rdx
   167 000001DA EB1A                <2>                 jmp CheckExit
   168                              <2> 
   169 000001DC 48C7C2FFFFFFFF      <2> PlusNum:        mov rdx, UNKNOWN_LETTER
   170                              <2> 
   171 000001E3 4883F830            <2>                 cmp rax, '0'                        ; error if not digit
   172 000001E7 7C0D                <2>                 jl CheckExit
   173                              <2> 
   174 000001E9 4883F839            <2>                 cmp rax, '9'                        ; error if not digit
   175 000001ED 7F07                <2>                 jg CheckExit
   176                              <2> 
   177 000001EF 4883E830            <2>                 sub rax, '0'
   178 000001F3 4889C2              <2>                 mov rdx, rax                        ; rdx = first num digit
   179                              <2> CheckExit:
   180 000001F6 C3                  <2>                 ret
   181                              <2> 
   182                              <2> 
    20                              <1> %include "std_lib/hlt.s"
    21 000001F7 B83C000000          <2> _hlt:       mov rax, 0x3c                               ; exit
    22 000001FC BF00000000          <2>             mov rdi, 0                                  ; err_code
    23 00000201 0F05                <2>             syscall
    24                              <2> 
    25 00000203 C3                  <2>             ret
     2                                  
     3                                  global _start
     4 00000204 E8EEFFFFFF              _start: call _hlt
     5                                  
